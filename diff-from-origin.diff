diff --git a/src/Users.sol b/src/Users.sol
index 1cbd863..48d81fc 100644
--- a/src/Users.sol
+++ b/src/Users.sol
@@ -1,5 +1,9 @@
 // SPDX-License-Identifier: Apache-2.0.
 pragma solidity ^0.6.12;
+pragma experimental ABIEncoderV2;
+
+
+//import {console} from "forge-std/console.sol";
 
 /*
   MIT License
@@ -690,6 +694,9 @@ contract MainStorage is ProxyStorage {
     // Mapping from STARK public key to the Ethereum public key of its owner.
     mapping(uint256 => address) ethKeys; // NOLINT: uninitialized-state.
 
+    // Mapping from STARK public key to the block.timestamp the sender tried to register their eth address without an operator signature
+    mapping(uint256 => uint256) registrationTimer;
+
     // Timelocked state transition and availability verification chain.
     StarkExTypes.ApprovalChainData verifiersChain;
     StarkExTypes.ApprovalChainData availabilityVerifiersChain;
@@ -734,6 +741,162 @@ contract MainStorage is ProxyStorage {
     uint256[LAYOUT_LENGTH - 40] private __endGap; // __endGap complements layout to LAYOUT_LENGTH.
 }
 
+/*
+  Implements Generic Governance, applicable for both proxy and main contract, and possibly others.
+  Notes:
+   The use of the same function names by both the Proxy and a delegated implementation
+   is not possible since calling the implementation functions is done via the default function
+   of the Proxy. For this reason, for example, the implementation of MainContract (MainGovernance)
+   exposes mainIsGovernor, which calls the internal _isGovernor method.
+*/
+abstract contract Governance is MGovernance {
+    event LogNominatedGovernor(address nominatedGovernor);
+    event LogNewGovernorAccepted(address acceptedGovernor);
+    event LogRemovedGovernor(address removedGovernor);
+    event LogNominationCancelled();
+
+    function getGovernanceInfo() internal view virtual returns (GovernanceInfoStruct storage);
+
+    /*
+      Current code intentionally prevents governance re-initialization.
+      This may be a problem in an upgrade situation, in a case that the upgrade-to implementation
+      performs an initialization (for real) and within that calls initGovernance().
+
+      Possible workarounds:
+      1. Clearing the governance info altogether by changing the MAIN_GOVERNANCE_INFO_TAG.
+         This will remove existing main governance information.
+      2. Modify the require part in this function, so that it will exit quietly
+         when trying to re-initialize (uncomment the lines below).
+    */
+    function initGovernance() internal {
+        GovernanceInfoStruct storage gub = getGovernanceInfo();
+        require(!gub.initialized, "ALREADY_INITIALIZED");
+        gub.initialized = true; // to ensure addGovernor() won't fail.
+        // Add the initial governer.
+        addGovernor(msg.sender);
+    }
+
+    function _isGovernor(address testGovernor) internal view override returns (bool) {
+        GovernanceInfoStruct storage gub = getGovernanceInfo();
+        return gub.effectiveGovernors[testGovernor];
+    }
+
+    /*
+      Cancels the nomination of a governor candidate.
+    */
+    function _cancelNomination() internal onlyGovernance {
+        GovernanceInfoStruct storage gub = getGovernanceInfo();
+        gub.candidateGovernor = address(0x0);
+        emit LogNominationCancelled();
+    }
+
+    function _nominateNewGovernor(address newGovernor) internal onlyGovernance {
+        GovernanceInfoStruct storage gub = getGovernanceInfo();
+        require(!_isGovernor(newGovernor), "ALREADY_GOVERNOR");
+        gub.candidateGovernor = newGovernor;
+        emit LogNominatedGovernor(newGovernor);
+    }
+
+    /*
+      The addGovernor is called in two cases:
+      1. by _acceptGovernance when a new governor accepts its role.
+      2. by initGovernance to add the initial governor.
+      The difference is that the init path skips the nominate step
+      that would fail because of the onlyGovernance modifier.
+    */
+    function addGovernor(address newGovernor) private {
+        require(!_isGovernor(newGovernor), "ALREADY_GOVERNOR");
+        GovernanceInfoStruct storage gub = getGovernanceInfo();
+        gub.effectiveGovernors[newGovernor] = true;
+    }
+
+    function _acceptGovernance() internal {
+        // The new governor was proposed as a candidate by the current governor.
+        GovernanceInfoStruct storage gub = getGovernanceInfo();
+        require(msg.sender == gub.candidateGovernor, "ONLY_CANDIDATE_GOVERNOR");
+
+        // Update state.
+        addGovernor(gub.candidateGovernor);
+        gub.candidateGovernor = address(0x0);
+
+        // Send a notification about the change of governor.
+        emit LogNewGovernorAccepted(msg.sender);
+    }
+
+    /*
+      Remove a governor from office.
+    */
+    function _removeGovernor(address governorForRemoval) internal onlyGovernance {
+        require(msg.sender != governorForRemoval, "GOVERNOR_SELF_REMOVE");
+        GovernanceInfoStruct storage gub = getGovernanceInfo();
+        require(_isGovernor(governorForRemoval), "NOT_GOVERNOR");
+        gub.effectiveGovernors[governorForRemoval] = false;
+        emit LogRemovedGovernor(governorForRemoval);
+    }
+}
+
+/**
+  The StarkEx contract is governed by one or more Governors of which the initial one is the
+  deployer of the contract.
+
+  A governor has the sole authority to perform the following operations:
+
+  1. Nominate additional governors (:sol:func:`mainNominateNewGovernor`)
+  2. Remove other governors (:sol:func:`mainRemoveGovernor`)
+  3. Add new :sol:mod:`Verifiers` and :sol:mod:`AvailabilityVerifiers`
+  4. Remove :sol:mod:`Verifiers` and :sol:mod:`AvailabilityVerifiers` after a timelock allows it
+  5. Nominate Operators (see :sol:mod:`Operator`) and Token Administrators (see :sol:mod:`TokenRegister`)
+
+  Adding governors is performed in a two step procedure:
+
+  1. First, an existing governor nominates a new governor (:sol:func:`mainNominateNewGovernor`)
+  2. Then, the new governor must accept governance to become a governor (:sol:func:`mainAcceptGovernance`)
+
+  This two step procedure ensures that a governor public key cannot be nominated unless there is an
+  entity that has the corresponding private key. This is intended to prevent errors in the addition
+  process.
+
+  The governor private key should typically be held in a secure cold wallet.
+*/
+/*
+  Implements Governance for the StarkDex main contract.
+  The wrapper methods (e.g. mainIsGovernor wrapping _isGovernor) are needed to give
+  the method unique names.
+  Both Proxy and StarkExchange inherit from Governance. Thus, the logical contract method names
+  must have unique names in order for the proxy to successfully delegate to them.
+*/
+contract MainGovernance is GovernanceStorage, Governance {
+    // The tag is the sting key that is used in the Governance storage mapping.
+    string public constant MAIN_GOVERNANCE_INFO_TAG = "StarkEx.Main.2019.GovernorsInformation";
+
+    /*
+      Returns the GovernanceInfoStruct associated with the governance tag.
+    */
+    function getGovernanceInfo() internal view override returns (GovernanceInfoStruct storage) {
+        return governanceInfo[MAIN_GOVERNANCE_INFO_TAG];
+    }
+
+    function mainIsGovernor(address testGovernor) external view returns (bool) {
+        return _isGovernor(testGovernor);
+    }
+
+    function mainNominateNewGovernor(address newGovernor) external {
+        _nominateNewGovernor(newGovernor);
+    }
+
+    function mainRemoveGovernor(address governorForRemoval) external {
+        _removeGovernor(governorForRemoval);
+    }
+
+    function mainAcceptGovernance() external {
+        _acceptGovernance();
+    }
+
+    function mainCancelNomination() external {
+        _cancelNomination();
+    }
+}
+
 contract LibConstants {
     // Durations for time locked mechanisms (in seconds).
     // Note that it is known that miners can manipulate block timestamps
@@ -815,8 +978,31 @@ contract LibConstants {
 
   If the above holds, the Ethereum address is registered by the contract, mapping it to the Stark Key.
 */
-abstract contract Users is MainStorage, LibConstants {
+contract Users is MainStorage, LibConstants, MainGovernance {
+    uint256 SELF_DISPUTE_PERIOD = 7 days;
+
     event LogUserRegistered(address ethKey, uint256 starkKey, address sender);
+    event LogUserAdminAdded(address userAdmin);
+    event LogUserAdminRemoved(address userAdmin);
+
+    //construct calls initGovernance
+    constructor() public {
+        initGovernance();
+    }
+
+    function registerUserAdmin(address newAdmin) external onlyGovernance {
+        userAdmins_DEPRECATED[newAdmin] = true;
+        emit LogUserAdminAdded(newAdmin);
+    }
+
+    function unregisterUserAdmin(address oldAdmin) external onlyGovernance {
+        userAdmins_DEPRECATED[oldAdmin] = false;
+        emit LogUserAdminRemoved(oldAdmin);
+    }
+
+    function isUserAdmin(address testedAdmin) public view returns (bool) {
+        return userAdmins_DEPRECATED[testedAdmin];
+    }
 
     function isOnCurve(uint256 starkKey) private view returns (bool) {
         uint256 xCubed = mulmod(mulmod(starkKey, starkKey, K_MODULUS), starkKey, K_MODULUS);
@@ -824,19 +1010,18 @@ abstract contract Users is MainStorage, LibConstants {
     }
 
     function registerSender(uint256 starkKey, bytes calldata starkSignature) external {
-        registerEthAddress(msg.sender, starkKey, starkSignature);
+        registerEthAddressOrig(msg.sender, starkKey, starkSignature);
     }
 
-    function registerEthAddress(
+    function registerEthAddressOrig(
         address ethKey,
         uint256 starkKey,
         bytes calldata starkSignature
-    ) public {
+    ) private {
         // Validate keys and availability.
         require(starkKey != 0, "INVALID_STARK_KEY");
         require(starkKey < K_MODULUS, "INVALID_STARK_KEY");
         require(ethKey != ZERO_ADDRESS, "INVALID_ETH_ADDRESS");
-        require(ethKeys[starkKey] == ZERO_ADDRESS, "STARK_KEY_UNAVAILABLE");
         require(isOnCurve(starkKey), "INVALID_STARK_KEY");
         require(starkSignature.length == 32 * 3, "INVALID_STARK_SIGNATURE_LENGTH");
 
@@ -856,6 +1041,113 @@ abstract contract Users is MainStorage, LibConstants {
         emit LogUserRegistered(ethKey, starkKey, msg.sender);
     }
 
+    function isOperatorSignatureValid(address ethKey, uint256 starkKey, bytes calldata operatorSignature) public view returns (bool) {
+        if (operatorSignature.length != 65) {
+            return false;
+        }
+
+        bytes memory sig = operatorSignature;
+        bytes32 signedData = keccak256(abi.encodePacked("UserRegistration:", ethKey, starkKey));
+        uint8 v = uint8(sig[64]);
+        bytes32 r;
+        bytes32 s;
+
+        assembly {
+            r := mload(add(sig, 32))
+            s := mload(add(sig, 64))
+        }
+
+        address signer = ecrecover(signedData, v, r, s);
+//        console.log("signer: %s", signer);
+        return signer != ZERO_ADDRESS && isUserAdmin(signer);
+    }
+
+    function getRegistrationTimer(uint256 starkKey) public view returns (uint256) {
+        return registrationTimer[starkKey];
+    }
+
+    function registerEthAddress(
+        address ethKey,
+        uint256 starkKey,
+        bytes calldata starkSignature
+    ) public {
+        // pre-checks
+        require(starkKey != 0, "INVALID_STARK_KEY");
+        require(starkKey < K_MODULUS, "INVALID_STARK_KEY");
+        require(ethKey != ZERO_ADDRESS, "INVALID_ETH_ADDRESS");
+
+        // unregister flow
+        if (ethKeys[starkKey] == ZERO_ADDRESS) {
+            // operatorSignature is blank, so we don't need to check it.
+            registrationTimer[starkKey] = block.timestamp + SELF_DISPUTE_PERIOD;
+            return registerEthAddressOrig(ethKey, starkKey, starkSignature);
+        }
+
+        // register flow
+        // ---
+        // If the registered eth address is the same as the passed in eth address - do nothing!
+        // To prevent the registration timer from resetting and acting as a censorship vector
+        require(ethKeys[starkKey] != ethKey, "ETH_ADDRESS_ALREADY_REGISTERED");
+
+        // If the block.timestamp > registrationTimer[starkKey] + 7 days - do nothing! (self-dispute period has passed)
+        // if registrationTimer[starkKey] == 0, we consider it as the self-dispute period has passed as well.
+        require(block.timestamp <= registrationTimer[starkKey], "SELF_DISPUTE_PERIOD_PASSED");
+
+        // So long as we're within the 7-day self-dispute registration timer block.timestamp <= registrationTimer[starkKey] + 7 days
+        // if operatorSignature is invalid/blank, a self-dispute registration timer for the stark key is reset.
+        registrationTimer[starkKey] = block.timestamp + SELF_DISPUTE_PERIOD;
+        return registerEthAddressOrig(ethKey, starkKey, starkSignature);
+    }
+
+    function getEthKey(uint256 ownerKey) public view returns (address) {
+        return ethKeys[ownerKey];
+    }
+
+    function registerEthAddress(
+        address ethKey,
+        uint256 starkKey,
+        bytes calldata starkSignature,
+        bytes calldata operatorSignature // NEW
+    ) public {
+        // pre-checks
+        require(starkKey != 0, "INVALID_STARK_KEY");
+        require(starkKey < K_MODULUS, "INVALID_STARK_KEY");
+        require(ethKey != ZERO_ADDRESS, "INVALID_ETH_ADDRESS");
+        // new check
+        require(operatorSignature.length == 65, "INVALID_OPERATOR_SIGNATURE");
+
+        // unregister flow
+        if (ethKeys[starkKey] == ZERO_ADDRESS) {
+            // if operatorSignature is invalid, a self-dispute registration timer for the stark key is set.
+            if (!isOperatorSignatureValid(ethKey, starkKey, operatorSignature)) {
+                registrationTimer[starkKey] = block.timestamp + SELF_DISPUTE_PERIOD;
+            } else {
+                registrationTimer[starkKey] = 0;
+            }
+            return registerEthAddressOrig(ethKey, starkKey, starkSignature);
+        }
+
+        // register flow
+        // ---
+        // If the registered eth address is the same as the passed in eth address - do nothing!
+        // To prevent the registration timer from resetting and acting as a censorship vector
+        require(ethKeys[starkKey] != ethKey, "ETH_ADDRESS_ALREADY_REGISTERED");
+
+        // If the block.timestamp > registrationTimer[starkKey] + 7 days - do nothing! (self-dispute period has passed)
+        // if registrationTimer[starkKey] == 0, we consider it as the self-dispute period has passed as well.
+        require(block.timestamp <= registrationTimer[starkKey], "SELF_DISPUTE_PERIOD_PASSED");
+
+        // So long as we're within the 7-day self-dispute registration timer block.timestamp <= registrationTimer[starkKey] + 7 days
+        // if operatorSignature is invalid, a self-dispute registration timer for the stark key is reset.
+        if (!isOperatorSignatureValid(ethKey, starkKey, operatorSignature)) {
+            registrationTimer[starkKey] = block.timestamp + SELF_DISPUTE_PERIOD;
+        } // else @todo should we remove the registrationTimer[starkKey] to prevent a user from resetting the timer?
+        else {
+            registrationTimer[starkKey] = 0;
+        }
+        return registerEthAddressOrig(ethKey, starkKey, starkSignature);
+    }
+
     function fieldPow(uint256 base, uint256 exponent) internal view returns (uint256) {
         // NOLINTNEXTLINE: low-level-calls reentrancy-events reentrancy-no-eth.
         (bool success, bytes memory returndata) = address(5).staticcall(
